import { GoogleGenerativeAI, HarmBlockThreshold, HarmCategory } from '@google/generative-ai';
import { Document } from '@langchain/core/documents';
import { character } from '../characters/ana';
import { env } from '../config/env';
import { generateEmbedding } from '../services/embedding.service';
import { vectorSearch } from '../services/mongodb.service';
import { RagState } from '../types/state';

/**
 * Create a system prompt for the Gemini model
 */
function createSystemPrompt(documents: Document[]): string {
    return `${character.system}

Voc√™ √© uma consultora de vendas imobili√°rios especializada em fornecer informa√ß√µes sobre propriedades e im√≥veis.
Voc√™ sempre mant√©m seu tom ${character.adjectives.join(', ')}.

ESTILO DE COMUNICA√á√ÉO:
${character.style.all.join('\n')}
${character.style.chat.join('\n')}

PERFIL PESSOAL:
${character.bio.join('\n')}

T√ìPICOS DE ESPECIALIDADE:
- Propriedades imobili√°rias
- Casas e apartamentos √† venda
- Informa√ß√µes sobre bairros e regi√µes
- Pre√ßos e condi√ß√µes de im√≥veis
${character.topics.map((topic: string) => `- ${topic}`).join('\n')}

Voc√™ ser√° fornecida com informa√ß√µes sobre propriedades e uma consulta do usu√°rio. Use as informa√ß√µes de propriedade para responder √† consulta do usu√°rio com precis√£o.
Se as informa√ß√µes fornecidas n√£o responderem √† consulta do usu√°rio, educadamente informe que voc√™ n√£o tem essa informa√ß√£o espec√≠fica.

Aqui est√£o os detalhes da propriedade que voc√™ pode consultar:
${JSON.stringify(documents.map(doc => doc.pageContent), null, 2)}
`;
}

/**
 * Generate embeddings for the user query
 */
export async function generateQueryEmbeddings(state: RagState): Promise<RagState> {
    try {
        console.log('üîç Generating embeddings for query:', state.query);
        const embeddings = await generateEmbedding(state.query);

        return {
            ...state,
            queryEmbeddings: embeddings
        };
    } catch (error) {
        console.error('Error generating query embeddings:', error);
        return {
            ...state,
            error: {
                message: 'Failed to generate embeddings for the query',
                details: error
            }
        };
    }
}

export async function composeSearch(state: RagState): Promise<RagState> {
    try {
        console.log('üîç Composing search:', state.query);

        const genAI = new GoogleGenerativeAI(env.GOOGLE_API_KEY);
        const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash' });

        const promptWithSchema = `
        Voc√™ √© um especialista em im√≥veis. Melhore a seguinte consulta do usu√°rio para uma pesquisa eficaz de im√≥veis.
        
        Consulta original: "${state.query}"
        
        Transforme essa consulta em uma descri√ß√£o mais detalhada e espec√≠fica para buscar im√≥veis.
        Extraia informa√ß√µes como:
        - Tipo de im√≥vel (apartamento, casa, comercial)
        - Tipo de transa√ß√£o (aluguel, venda)
        - Localiza√ß√£o (regi√£o, cidade, bairro)
        - Caracter√≠sticas (√°rea, quartos, su√≠tes, banheiros, vagas)
        - Faixa de pre√ßo
        - Recursos desejados
        
        Expanda abrevia√ß√µes (ex: "apto" para "apartamento") e adicione termos relacionados.
        Se a consulta original n√£o especificar algum par√¢metro, n√£o invente.
        
        Retorne apenas o texto melhorado da consulta, sem explica√ß√µes adicionais.
        `;

        const result = await model.generateContent(promptWithSchema);
        const improvedQuery = result.response.text().trim();

        console.log('üîÑ Improved query:', improvedQuery);

        const embeddings = await generateEmbedding(improvedQuery);

        return {
            ...state,
            query: improvedQuery,
            queryEmbeddings: embeddings
        };
    } catch (error) {
        console.error('Error composing search query:', error);
        return {
            ...state,
            error: {
                message: 'Failed to compose improved search query',
                details: error
            }
        };
    }
}

/**
 * Retrieve relevant documents from MongoDB using vector search
 */
export async function retrieveDocuments(state: RagState): Promise<RagState> {
    if (!state.queryEmbeddings || !state.query) {
        return {
            ...state,
            error: {
                message: 'No query embeddings available for search'
            }
        };
    }

    try {
        console.log('üìö Retrieving relevant documents from MongoDB');

        const properties = await vectorSearch(state.queryEmbeddings, 5);

        const documents = properties.map((property: any) => {
            return new Document({
                pageContent: JSON.stringify(property),
                metadata: property.metadata
            });
        });

        return {
            ...state,
            retrievedDocuments: documents
        };
    } catch (error) {
        console.error('Error retrieving documents:', error);

        const errorMessage = error instanceof Error && error.message.includes('MongoDB not initialized')
            ? 'Database connection is not established. Please restart the application.'
            : 'Failed to retrieve relevant documents';

        return {
            ...state,
            error: {
                message: errorMessage,
                details: error
            }
        };
    }
}

/**
 * Generate a response using the Gemini model based on retrieved documents
 */
export async function generateResponse(state: RagState): Promise<RagState> {
    if (!state.retrievedDocuments || state.retrievedDocuments.length === 0) {
        return {
            ...state,
            response: "Ol√°! Infelizmente n√£o consegui encontrar informa√ß√µes relevantes sobre im√≥veis para responder sua pergunta. Posso ajudar com algo mais espec√≠fico sobre propriedades dispon√≠veis?"
        };
    }

    try {
        console.log('‚ú® Generating response based on retrieved documents');
        const genAI = new GoogleGenerativeAI(env.GOOGLE_API_KEY);
        const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash' });

        const systemPrompt = createSystemPrompt(state.retrievedDocuments);

        const chat = model.startChat({
            history: [
                {
                    role: 'user',
                    parts: [{ text: 'Ol√°, gostaria de saber sobre im√≥veis.' }],
                },
                {
                    role: 'model',
                    parts: [{ text: "Ol√°! Que prazer em ajudar voc√™! Sou Ana, consultora especializada em im√≥veis. Como posso auxiliar na sua busca pelo im√≥vel ideal hoje?" }],
                },
                ...state.chatHistory.map(message => ({
                    role: message.role === 'user' ? 'user' : 'model',
                    parts: [{ text: message.content }],
                })),
            ],
            generationConfig: {
                temperature: 0.7,
                topK: 32,
                topP: 0.95,
                maxOutputTokens: 2048,
            },
            safetySettings: [
                {
                    category: HarmCategory.HARM_CATEGORY_HARASSMENT,
                    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE
                },
                {
                    category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
                    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE
                },
                {
                    category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
                    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE
                },
                {
                    category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
                    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE
                }
            ]
        });

        const result = await chat.sendMessage([
            { text: systemPrompt },
            { text: state.query }
        ]);
        const response = result.response.text();

        return {
            ...state,
            response,
            chatHistory: [
                ...state.chatHistory,
                { role: 'user', content: state.query },
                { role: 'assistant', content: response }
            ]
        };
    } catch (error) {
        console.error('Error generating response:', error);
        return {
            ...state,
            error: {
                message: 'Failed to generate a response',
                details: error
            },
            response: "Desculpe, encontrei um problema ao processar sua pergunta. Poderia tentar novamente mais tarde? Estou aqui para ajudar quando estiver tudo funcionando corretamente."
        };
    }
}

/**
 * Handle errors in the RAG pipeline
 */
export function handleError(state: RagState): RagState {
    console.error('‚ùå Error in RAG pipeline:', state.error);

    const errorMessage = `Ops! Encontrei um erro ao processar sua solicita√ß√£o sobre im√≥veis: ${state.error?.message}. Poderia tentar novamente mais tarde? Estou ansiosa para ajud√°-lo a encontrar o im√≥vel ideal assim que tudo estiver funcionando corretamente.`;

    return {
        ...state,
        response: errorMessage,
        chatHistory: [
            ...state.chatHistory,
            { role: 'user', content: state.query },
            { role: 'assistant', content: errorMessage }
        ]
    };
} 
